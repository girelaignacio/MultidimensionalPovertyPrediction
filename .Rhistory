target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
n_comp <- 10
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- do.call(prediction.method, list("pls_lm"))
prediction.method <- prediction.method("pls_lm")
prediction.method <- prediction_method("pls_lm")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
colnames(Xtrain)
```{r pls-lm, error=T}
Xtest
grep("^region_", colnames(newdata))
grep("^region_", colnames(Xtest))
grep("^time_", colnames(Xtest))
View(Xtest)
grep("^time_", colnames(Xtrain))
grep("^region_", colnames(Xtrain))
View(Xtest)
X1 <- 0.9575
X2 <- 0.9205
X1_se <- 0.024
X2_se <- 0.0030
(X2-X1)^2 * X1_se + X1^2 * sqrt(X1_se^2 + X2_se^2) + sqrt(X1_se^2 + X2_se^2) * X1_se
((X2-X1)^2 * X1_se + X1^2 * sqrt(X1_se^2 + X2_se^2) + sqrt(X1_se^2 + X2_se^2) * X1_se)*100^2
sqrt(X1_se^2 + X2_se^2)
X1_se <- 0.0024
sqrt(X1_se^2 + X2_se^2)
((X2-X1)^2 * X1_se + X1^2 * sqrt(X1_se^2 + X2_se^2) + sqrt(X1_se^2 + X2_se^2) * X1_se)
((X2-X1)^2 * X1_se^2 + X1^2 * sqrt(X1_se^2 + X2_se^2) + sqrt(X1_se^2 + X2_se^2) * X1_se^2)
#devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction_method("pls_lm")
devtools::load_all()
prediction.method <- prediction_method("pls_lm")
devtools::load_all()
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
getwd
getwd()
setwd("C:/Users/girel/MultidimensionalPovertyPrediction")
devtools::load_all()
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] ; Xtest <- data_test[,-1]
model.matrix(y~X)
model.matrix(ytrain~Xtrain)
model.matrix(ytrain~.)
model.matrix(y~., data)
View(data)
View(data)
model.matrix(MPI~., data)
y <- ytrain
X <- Xtrain
# x : metric data
# x_nm : non-metric data
PLS <- pls.datafilter(y, x, dimensions = param$ncomp, scale = FALSE)
x <- Xtrain
# x : metric data
# x_nm : non-metric data
PLS <- pls.datafilter(y, x, dimensions = param$ncomp, scale = FALSE)
# x : metric data
# x_nm : non-metric data
PLS <- pls.datafilter(y, x, dimensions = 10, scale = FALSE)
X <- PLS$X
X_nm <- PLS$X_nm
loadings <- PLS$W
scores <- as.matrix(X) %*% loadings
colnames(scores) <- paste("score", 1:param$ncomp, sep = "")
data <- as.data.frame(cbind(scores,X_nm))
View(data)
View(data)
View(scores)
scores <- as.matrix(X) %*% loadings
colnames(scores) <- paste("score", 1:param$ncomp, sep = "")
colnames(scores) <- paste("score", 1:10, sep = "")
data <- as.data.frame(cbind(scores,X_nm))
View(data)
colnames.pred <- colnames(data)
data$y <- y
model <- stats::lm(model.matrix(y ~ .), data = data, na.action = "na.exclude")
model.formula <- stats::model.matrix(model.matrix(y ~ ., data)
#stats::as.formula(paste0("y ~ ", paste0(colnames.pred,collapse = " + "),sep = ""))
model <- stats::lm(model.matrix(y ~ .), data = data, na.action = "na.exclude")
model.formula <- stats::model.matrix(model.matrix(y ~ ., data))
model.formula <- stats::model.matrix(y ~ ., data)
#stats::as.formula(paste0("y ~ ", paste0(colnames.pred,collapse = " + "),sep = ""))
model <- stats::lm(model.formula, data = data, na.action = "na.exclude")
#stats::as.formula(paste0("y ~ ", paste0(colnames.pred,collapse = " + "),sep = ""))
model <- stats::lm(model.formula, na.action = "na.exclude")
model.frame(y~.,data)
model.formula <- stats::model.frame(y ~ ., data)
#stats::as.formula(paste0("y ~ ", paste0(colnames.pred,collapse = " + "),sep = ""))
model <- stats::lm(model.formula, na.action = "na.exclude")
model <- stats::model.frame(y ~ ., data)
#stats::as.formula(paste0("y ~ ", paste0(colnames.pred,collapse = " + "),sep = ""))
model <- stats::lm(model, na.action = "na.exclude")
View(model)
devtools::load_all()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls_lm")
prediction.method <- prediction.method("pls.lm")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_lm.fit, Xtest)
mean((ytest - ypred)^2)
x <- Xtrain
y <- ytrain
col.region_ <- grep("^region_", colnames(x))
col.time_ <- grep("^time_", colnames(x))
col.out <- c(col.region_,col.time_)
X <- x[,- col.out]
X_nm <- x[, col.out]
W <- chemometrics::pls1_nipals(X, y, a = dimensions, scale = scale)$W
scores <- as.matrix(X) %*% W
dimensions = 10
W <- chemometrics::pls1_nipals(X, y, a = dimensions, scale = scale)$W
W <- chemometrics::pls1_nipals(X, y, a = dimensions, scale = FALSE)$W
scores <- as.matrix(X) %*% W
colnames(scores) <- paste("score", 1:dimensions, sep = "")
data <- as.data.frame(cbind(scores,X_nm))
colnames.pred <- colnames(data)
data$y <- y
model <- stats::model.frame(y ~ ., data)
model <- betareg::betareg(model, na.action = "na.exclude")
View(data)
model <- betareg::betareg(model)
scores <- as.matrix(X) %*% W
colnames(scores) <- paste("score", 1:dimensions, sep = "")
data <- as.data.frame(cbind(scores,X_nm))
colnames.pred <- colnames(data)
data$y <- y
model <- stats::model.frame(y ~ ., data)
model <- betareg::betareg(model)
View(data)
View(model)
model <- stats::model.frame(y ~ ., data)
modelframe <- stats::model.frame(y ~ ., data)
model <- betareg::betareg(modelframe)
modelframe <- stats::model.frame(y ~ . , data)
model <- betareg::betareg(modelframe)
model$projection <- W
model <- stats::model.frame(y ~ ., data,na.action = "na.exclude")
model <- betareg::betareg(model)
names(data)
model <- betareg::betareg(y ~ . , data, na.action = "na.exclude")
x <- Xtrain
y <- ytrain
summary(y)
y
which.min(y)
y[165]
View(Xtrain)
View(Xtrain)
e-10
e^-10
e^-10
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
y <- ytrain
x <- Xtrain
col.region_ <- grep("^region_", colnames(x))
col.time_ <- grep("^time_", colnames(x))
col.out <- c(col.region_,col.time_)
X <- x[,- col.out]
X_nm <- x[, col.out]
W <- chemometrics::pls1_nipals(X, y, a = dimensions, scale = scale)$W
scale=F
W <- chemometrics::pls1_nipals(X, y, a = dimensions, scale = scale)$W
scores <- as.matrix(X) %*% W
colnames(scores) <- paste("score", 1:dimensions, sep = "")
View(scores)
scores <- as.matrix(X) %*% W
data <- as.data.frame(cbind(scores,X_nm))
colnames.pred <- colnames(data)
data$y <- y
model <- stats::model.frame(y ~ . , data, na.action = "na.exclude")
model <- betareg::betareg(model)
View(scores)
names(scores)
colnames(scores)
scores <- as.matrix(X) %*% W
scores <- as.matrix(X) %*% W
colnames(scores) <- paste("score", 1:dimensions, sep = "")
data <- as.data.frame(cbind(scores,X_nm))
colnames.pred <- colnames(data)
data$y <- y
model <- stats::model.frame(y ~ . , data, na.action = "na.exclude")
model <- betareg::betareg(model)
(paste0("y~.", colnames.pred, collapse = "+")
)
paste0("y~.", paste0(colnames.pred, collapse = "+")
)
paste0("y~", paste0(colnames.pred, collapse = "+"))
model <- stats::as.formula(paste0("y~", paste0(colnames.pred, collapse = "+")))
model <- betareg::betareg(model)
model <- betareg::betareg(model, data)
#model <- betareg::betareg(y ~ . , data, na.action = "na.exclude")
model$projection <- W
modelframe <- stats::model.frame(y ~ . , data, na.action = "na.exclude")
View(modelframe)
class(modelframe)
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls.lm")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_lm.fit, Xtest)
mean((ytest - ypred)^2)
devtools::document()
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls.beta")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_beta.fit, Xtest)
mean((ytest - ypred)^2)
source("~/.active-rstudio-document", echo=TRUE)
library(MultidimensionalPovertyPrediction)
set.seed(16)
## basic example code
target <- "MPI"
which.data <- 1
data <- preprocessing.data(which.data, target, time.format = "trend")
head(data)
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.0000000001; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.0000000001; Xtest <- data_test[,-1]
CV_index <- caret::createResample(data[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls.beta")
prediction.method <- prediction.method("pls.beta")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
prediction.method <- prediction.method("pls.beta")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
devtools::load_all()
devtools::load_all()
library(MultidimensionalPovertyPrediction)
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls.beta")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
devtools::load_all()
prediction.method <- prediction.method("pls.beta")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
devtools::load_all()
prediction.method <- prediction.method("pls.beta")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
errorCondition(pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE))
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls.beta")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
devtools::check()
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("pls.beta")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
x <- Xtrain
y <- ytrain
col.region_ <- grep("^region_", colnames(x))
col.time_ <- grep("^time_", colnames(x))
col.out <- c(col.region_,col.time_)
X <- x[,- col.out]
X_nm <- x[, col.out]
W <- chemometrics::pls1_nipals(X, y, a = param$ncomp, scale = FALSE)$W
scores <- as.matrix(X) %*% W
W <- chemometrics::pls1_nipals(X, y, a = 10, scale = FALSE)$W
scores <- as.matrix(X) %*% W
colnames(scores) <- paste("score", 1:param$ncomp, sep = "")
colnames(scores) <- paste("score", 1:10, sep = "")
data <- as.data.frame(cbind(scores,X_nm))
colnames.pred <- colnames(data)
data$y <- y
model <- stats::as.formula(paste0("y ~ ", paste0(colnames.pred, collapse = "+")))
#modelframe <- stats::model.frame(y ~ . , data, na.action = "na.exclude")
model <- betareg::betareg(model, data)
#model <- betareg::betareg(y ~ . , data, na.action = "na.exclude")
model$projection <- W
model
newdata <- Xtest
## Now apply the same scaling to the new samples
col.region_ <- grep("^region_", colnames(newdata))
col.time_ <- grep("^time_", colnames(newdata))
col.out <- c(col.region_, col.time_)
X <- newdata[, - col.out]
scores <- as.matrix(X) %*% modelFit$projection
colnames(scores) <- paste("score", 1:ncol(scores), sep = "")
scores <- as.matrix(X) %*% model$projection
colnames(scores) <- paste("score", 1:ncol(scores), sep = "")
scores <- as.data.frame(scores)
X_nm <- newdata[, col.out]
newdata <- cbind(X_nm,scores)
## Predict the linear model
stats::predict(modelFit, newdata)
## Predict the linear model
stats::predict(model}, newdata)
## Predict the linear model
stats::predict(model, newdata)
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] + 0.00000000000001 ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] + 0.00000000000001 ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
prediction.method <- prediction.method("beta.pls")
pls_beta.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_beta.fit, Xtest)
mean((ytest - ypred)^2)
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = prediction.method,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_lm.fit, Xtest)
mean((ytest - ypred)^2)
devtools::document()
devtools::document()
usethis::use_package("betareg")
devtools::document()
devtools::check()
devtools::check()
