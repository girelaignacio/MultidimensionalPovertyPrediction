number=n_folds,
index = CV_index)
method.beta.pls <- prediction.method("beta.pls")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = method.beta.pls,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_lm.fit, Xtest)
mean((ytest - ypred)^2)
devtools::load_all()
set.seed(16)
target <- "MPI"
data <- preprocessing.data(which.data = 1, target = "MPI", time.format = "trend")
### Set parameters for tuning parameters
n_folds <- 5
train_index <- caret::createDataPartition(data[,target], p = 0.8, list = FALSE, times = 1)
data_train <- data[train_index,]
data_test <- data[-train_index,]
ytrain <- data_train[,target] ; Xtrain <- data_train[,-1]
ytest <- data_test[,target] ; Xtest <- data_test[,-1]
### Set train fitting control
CV_index <- caret::createResample(data_train[,target])
fitControl <- caret::trainControl(method="cv",
number=n_folds,
index = CV_index)
method.beta.pls <- prediction.method("beta.pls")
pls_lm.fit <- caret::train(x = Xtrain, y = ytrain,
method = method.beta.pls,
ncomp = 10,
trControl = fitControl,
verbose = FALSE)
ypred <- predict(pls_lm.fit, Xtest)
mean((ytest - ypred)^2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(method.beta.pls)
X <- Xtrain
y<- ytrain
data <- cbind.data.frame(X,y)
modelframe <- model.frame(y ~ . ,data)
betaboost <- mboost::glmboost(modeframe, family = betaboost::BetaReg())
betaboost <- mboost::glmboost(modelframe, family = betaboost::BetaReg())
betaboost <- mboost::glmboost(y~., data, family = betaboost::BetaReg())
install.packages
install.packages("betaboost")
betaboost <- mboost::glmboost(y~., data, family = betaboost::BetaReg())
install.packages("betaboost")
install_github("boost-R/betaboost")
devtools::install_github("boost-R/betaboost")
betaboost <- mboost::glmboost(y~., data, family = betaboost::BetaReg())
source("~/.active-rstudio-document", echo=TRUE)
ypred <- predict(pls_lm.fit, Xtest)
mean((ytest - ypred)^2)
predict(betaboost, newdata = Xtest, type = "response")
predict(betaboost, newdata = Xtest)
predict(pls_lm.fit, Xtest)
exp(1.5)
sin(2)
sin(2)*1.5
sin(2)*1.5+exp(1.5)
0.5*(sin(2)*1.5+exp(1.5))
1.5*0.5
exp(1.5*0.5)
exp(1.5)*0.5+0.5*(0.9092)
exp(1.5)*0.5
sen(2)+exp(1.5)
sin(2)+exp(1.5)
0.5(sin(2)+exp(1.5))
0.5*(sin(2)+exp(1.5))
exp(1.5)*0.5+0.5*(0.9092)
sqrt(0.0024+0.0030)
sqrt((0.0024)^2+(0.0030)^2)
# for replication
set.seed(1234)
# create the data
y = rnorm(1000, mean = 5, sd = 2)
starting_values = c(0, 1)
# the log likelihood function
simple_ll <- function(mu, sigma, verbose = TRUE) {
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
optim(par = starting_values, simple_ll, method = "L-BFGS-B", lower = c(sigma=0))
optim(par = starting_values, simple_ll, method = "L-BFGS-B")
optim(par = list(mean = 0, sigma = 1), simple_ll, method = "L-BFGS-B")
# the log likelihood function
simple_ll <- function(par, verbose = TRUE) {
ll = sum(dnorm(y, mean = par[1], sd = par[2], log = TRUE))
if (verbose)
message(paste(par[1], par[2], ll))
-ll
}
optim(par = list(mean = 0, sigma = 1), simple_ll, method = "L-BFGS-B")
optim(par =starting_values, simple_ll, method = "L-BFGS-B")
# the log likelihood function
simple_ll <- function(par, verbose = FALSE) {
ll = sum(dnorm(y, mean = par[1], sd = par[2], log = TRUE))
if (verbose)
message(paste(par[1], par[2], ll))
-ll
}
optim(par =starting_values, simple_ll, method = "L-BFGS-B")
summary(lm(y~ x))
summary(lm(y~ .))
summary(lm(y~ 1))
# create the data
y = rnorm(1000, mean = 2.5, sd = 0.1)
starting_values = c(0, 1)
# the log likelihood function
simple_ll <- function(par, verbose = FALSE) {
ll = sum(dnorm(y, mean = par[1], sd = par[2], log = TRUE))
if (verbose)
message(paste(par[1], par[2], ll))
-ll
}
optim(par =starting_values, simple_ll, method = "L-BFGS-B") # trace = TRUE, lower = c(sigma = 0) ?
summary(lm(y~ 1))
2.501451/0.003103
ll = sum(dnorm(y, mean = 1, sd = 0, log = TRUE))
# create the data
y = rnorm(1000, mean = 5, sd = 2)
starting_values = c(0, 1)
# the log likelihood function
simple_ll <- function(par, verbose = FALSE) {
ll = sum(dnorm(y, mean = par[1], sd = par[2], log = TRUE))
if (verbose)
message(paste(par[1], par[2], ll))
-ll
}
optim(par =starting_values, simple_ll, method = "L-BFGS-B") # trace = TRUE, lower = c(sigma = 0) ?
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf)) # trace = TRUE, lower = c(sigma = 0) ?
# create the data
y = rnorm(1000, mean = 2.5, sd = 0.1)
starting_values = c(0, 1)
# the log likelihood function
simple_ll <- function(par, verbose = FALSE) {
ll = sum(dnorm(y, mean = par[1], sd = par[2], log = TRUE))
if (verbose)
message(paste(par[1], par[2], ll))
-ll
}
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf)) # trace = TRUE, lower = c(sigma = 0) ?
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf), control = list(trace = 5,fnscale=-1)) # trace = TRUE, lower = c(sigma = 0) ?
# for replication
set.seed(1234)
# create the data
y = rnorm(1000, mean = 2.5, sd = 0.1)
starting_values = c(0, 1)
# the log likelihood function
simple_ll <- function(par, verbose = FALSE) {
ll = sum(dnorm(y, mean = par[1], sd = par[2], log = TRUE))
if (verbose)
message(paste(par[1], par[2], ll))
-ll
}
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf), control = list(trace = 5,fnscale=-1)) # trace = TRUE, lower = c(sigma = 0) ?
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf), control = list(trace = 5)) # trace = TRUE, lower = c(sigma = 0) ?
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf), control = list(trace = 5)) # trace = TRUE, lower = c(sigma = 0) ?
optim(par =starting_values, simple_ll, method = "L-BFGS-B", lower=c(-Inf, 0), upper = c(Inf,Inf), control = list(trace = 1)) # trace = TRUE, lower = c(sigma = 0) ?
install.packages(bbmle)
install.packages("bbmle")
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 2, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
mlnorm = bbmle::mle2(
simple_ll,
start  = list(par[1] = 2, par[2] = 1),
mlnorm = bbmle::mle2(
simple_ll,
start  = list(par[1] = 2, par[2] = 1),
# the log likelihood function
simple_ll <- function(mu, sigma , verbose = FALSE) {
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
# for replication
set.seed(1234)
# create the data
y = rnorm(1000, mean = 2.5, sd = 0.1)
starting_values = c(0, 1)
# the log likelihood function
simple_ll <- function(mu, sigma , verbose = FALSE) {
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
mlnorm = bbmle::mle2(
simple_ll,
start  = list(par[1] = 2, par[2] = 1),
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 2, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 2, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 0, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
mlnorm
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 0, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
grad_simple_ll <- function(mu, sigma){
grad_simple_ll <- function(mu, sigma){
c(sum(-(y-mu)/sigma^2),
sum(1/sigma + ((y-mu)^2)/(sigma^3)))
}
simple_ll <- function(mu, sigma, verbose = FALSE) {
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
grad_simple_ll <- function(mu, sigma){
c(sum(-(y-mu)/sigma^2),
sum(1/sigma + ((y-mu)^2)/(sigma^3)))
}
optim(par = c(0,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
simple_ll <- function(par, verbose = FALSE) {
mu <- par[1]
sigma <- par[2]
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
grad_simple_ll <- function(par){
mu <- par[1]
sigma <- par[2]
return(
c(sum(-(y-mu)/sigma^2),
sum(1/sigma + ((y-mu)^2)/(sigma^3)))
)
}
optim(par = c(0,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
grad_simple_ll <- function(par, verbose = FALSE){
mu <- par[1]
sigma <- par[2]
return(
c(sum(-(y-mu)/sigma^2),
sum(1/sigma + ((y-mu)^2)/(sigma^3)))
)
}
optim(par = c(0,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(0,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(2,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(-1,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(5,1), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(5,0.5), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(5,0.2), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(3,0.2), simple_ll, gr = grad_simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(3,0.2), simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(3,1), simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
# create the data
y = rnorm(1000, mean = 2.5, sd = 4)
starting_values = c(0, 1)
simple_ll <- function(par, verbose = FALSE) {
mu <- par[1]
sigma <- par[2]
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
grad_simple_ll <- function(par, verbose = FALSE){
mu <- par[1]
sigma <- par[2]
return(
c(sum(-(y-mu)/sigma^2),
sum(1/sigma + ((y-mu)^2)/(sigma^3)))
)
}
optim(par = c(3,1), simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 3, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
# the log likelihood function
simple_ll <- function(mu, sigma , verbose = FALSE) {
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
mlnorm = bbmle::mle2(
simple_ll,
start  = list(mu = 3, sigma = 1),
method = "L-BFGS-B",
lower  = c(sigma = 0),
trace = TRUE
)
mlnorm
simple_ll <- function(par, verbose = FALSE) {
mu <- par[1]
sigma <- par[2]
ll = sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
if (verbose)
message(paste(mu, sigma, ll))
-ll
}
grad_simple_ll <- function(par, verbose = FALSE){
mu <- par[1]
sigma <- par[2]
return(
c(sum(-(y-mu)/sigma^2),
sum(1/sigma + ((y-mu)^2)/(sigma^3)))
)
}
optim(par = c(3,1), simple_ll, method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(3,1), simple_ll, gr = grad_simple_ll,method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(3,2), simple_ll, gr = grad_simple_ll,method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1, fnscale = -1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
optim(par = c(3,2), simple_ll, gr = grad_simple_ll,method = "L-BFGS-B",
lower=c(-Inf, 0), upper = c(Inf,Inf),
control = list(trace = 1), verbose = FALSE) # trace = TRUE, lower = c(sigma = 0) ?
# for replication
set.seed(1234)
# predictor
X = rnorm(1000)
# coefficients for intercept and predictor
beta = c(5, 2)
# add intercept to X and create y with some noise
y = cbind(1, X) %*% beta + rnorm(1000, sd = 2.5)
regression_ll <- function(sigma = 1, Int = 0, b1 = 0) {
coefs = c(Int, b1)
mu = cbind(1,X)%*%coefs
ll = -sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
message(paste(sigma, Int, b1, ll))
ll
}
mlopt =  bbmle::mle2(regression_ll, method = "L-BFGS-B", lower = c(sigma = 0))
summary(mlopt)
modlm = lm(y ~ X)
summary(modlm)
# for replication
set.seed(1234)
# predictor
X = rnorm(1000)
# coefficients for intercept and predictor
beta = c(5, 2)
# add intercept to X and create y with some noise
y = cbind(1, X) %*% beta + rnorm(1000, sd = 2.5)
regression_ll <- function(sigma = 1, Int = 0, b1 = 0) {
coefs = c(Int, b1)
mu = cbind(1,X)%*%coefs
ll = -sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
message(paste(sigma, Int, b1, ll))
ll
}
mlopt =  bbmle::mle2(regression_ll, method = "L-BFGS-B", lower = c(sigma = 0))
mlopt
summary(modlm)
library(tidyverse)
set.seed(123)  # ensures replication
# predictors and response
N = 100 # sample size
k = 2   # number of desired predictors
X = matrix(rnorm(N * k), ncol = k)
y = -.5 + .2*X[, 1] + .1*X[, 2] + rnorm(N, sd = .5)  # increasing N will get estimated values closer to these
dfXy = data.frame(X,y)
penalized_ML <- function(
par,
X,
y,
lambda = .1,
type = 'L2'
) {
# arguments-
# par: parameters to be estimated
# X: predictor matrix with intercept column
# y: response
# lambda: penalty coefficient
# type: penalty approach
# setup
beta   = par[-1]                               # coefficients
sigma2 = par[1]                                # error variance
sigma  = sqrt(sigma2)
N = nrow(X)
LP = X %*% beta                                # linear predictor
mu = LP                                        # identity link in the glm sense
# calculate likelihood
L = dnorm(y, mean = mu, sd = sigma, log = T)   # log likelihood
switch(
type,
'L2' = -sum(L) + lambda * crossprod(beta[-1]),    # the intercept is not penalized
'L1' = -sum(L) + lambda * sum(abs(beta[-1]))
)
}
# for replication
set.seed(1234)
# predictor
X = rnorm(1000)
# coefficients for intercept and predictor
beta = c(5, 2)
# add intercept to X and create y with some noise
eta = cbind(1, X) %*% beta + rnorm(1000, sd = 2.5)
y = exp(eta)/exp(1+eta)
# for replication
set.seed(1234)
# predictor
X = rnorm(1000)
# coefficients for intercept and predictor
beta = c(5, 2)
# add intercept to X and create y with some noise
eta = cbind(1, X) %*% beta + rnorm(1000, sd = 2.5)
y = exp(eta)/exp(1+eta)
# for replication
set.seed(1234)
# predictor
X = rnorm(1000)
# coefficients for intercept and predictor
beta = c(5, 2)
# add intercept to X and create y with some noise
eta = cbind(1, X) %*% beta + rnorm(1000, sd = 2.5)
y = exp(eta)/exp(1+eta)
regression_ll <- function(sigma = 1, Int = 0, b1 = 0) {
coefs = c(Int, b1)
eta = cbind(1,X)%*%coefs
mu = exp(eta)/exp(1+eta)
ll = .5 * crossprod(y - X %*% beta) / N
#ll = -sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
message(paste(sigma, Int, b1, ll))
ll
}
mlopt =  bbmle::mle2(regression_ll, method = "L-BFGS-B", lower = c(sigma = 0))
regression_ll <- function(sigma = 1, Int = 0, b1 = 0) {
coefs = c(Int, b1)
eta = cbind(1,X)%*%coefs
mu = exp(eta)/exp(1+eta)
ll = .5 * crossprod(y - mu) / N
#ll = -sum(dnorm(y, mean = mu, sd = sigma, log = TRUE))
message(paste(sigma, Int, b1, ll))
ll
}
mlopt =  bbmle::mle2(regression_ll, method = "L-BFGS-B", lower = c(sigma = 0))
mlopt
modlm = glm(y ~ X, family = "binomial")
y
plot(y)
# for replication
set.seed(1234)
# predictor
X = rnorm(1000)
# coefficients for intercept and predictor
beta = c(5, 2)
# add intercept to X and create y with some noise
eta = cbind(1, X) %*% beta + rnorm(1000, sd = 2.5)
y = exp(eta)/1+exp(eta)
plot(y)
summary(y)
